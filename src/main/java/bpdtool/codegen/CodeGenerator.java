package bpdtool.codegen;

import bpdtool.data.*;

import java.io.File;

public abstract class CodeGenerator
{
	protected final String PREFIX_PACKETRECEIVER = "_Recv_";
	protected final String C2S_LASTPACKETID = "C2S_LastPacketID";
	protected final String S2C_LASTPACKETID = "S2C_LastPacketID";


	private int m_csRole;
	private String m_encoding;
	private String m_newline;
	private File m_outputDir;

	private Exporter m_owner;
	protected Protocol m_doc;
	protected ITextWriter m_logger;

	public void setEncoding(String encoding)
	{
		m_encoding = encoding;
	}

	public void setNewLineChar(String nlchar)
	{
		int b = 0;

		String str = nlchar.toUpperCase();
		if(str.contains("CR"))
			b |= 1;
		if(str.contains("LF"))
			b |= 2;

		switch(b)
		{
		case 1:
			m_newline = "\r";
			break;
		case 2:
			m_newline = "\n";
			break;
		default:
			m_newline = "\r\n";
			break;
		}
	}

	public void setCsRole(int role)
	{
		m_csRole = role;
	}

	public int getCsRole()
	{
		return m_csRole;
	}

	public void setOutputDir(File path)
	{
		m_outputDir = path;
	}

	public void init(Exporter owner, Protocol doc)
	{
		m_owner = owner;
		m_doc = doc;
	}

	public abstract boolean prepare(ITextWriter logger, Protocol doc);
	public abstract boolean export(ITextWriter logger) throws Exception;

	protected Exporter getExporter()
	{
		return m_owner;
	}

	protected BufferedTabWriter getTabWriteBuffer()
	{
		return m_owner.getTabWriteBuffer();
	}

	protected StreamWriter openCodeStream(String filename) throws Exception
	{
		return openCodeStream(filename, null);
	}

	protected StreamWriter openCodeStream(String filename, String subdir) throws Exception
	{
		StreamWriter sw;

		if (m_owner.isPreviewMode())
		{
			sw = new StreamWriter(filename);
		}
		else
		{
			File file;
			if (subdir == null)
			{
				file = new File(m_outputDir, filename);
			}
			else
			{
				File dir = new File(m_outputDir, subdir);
				if (dir.exists())
				{
					if (!dir.isDirectory())
						throw new RuntimeException("Not a directory: " + dir.getAbsolutePath());
				}
				else
				{
					dir.mkdirs();
				}

				file = new File(dir, filename);
			}

			sw = new StreamWriter(file, m_encoding, m_newline);

			if (m_doc.getConfig().AddUnicodeBOM)
				sw.addBOM(m_encoding);
		}

		sw.writeln("// THIS FILE WAS GENERATED BY \"Binary Protocol Designer\"");
		sw.writeln("// Visit https://github.com/shkim/bpdtool for more information.");

		return sw;
	}

	protected void closeCodeStream(StreamWriter sw) throws Exception
	{
		sw.writeln("// END OF GENERATION");
		sw.close();

		if (m_owner.isPreviewMode())
		{
			m_owner.onPreviewItemReady(sw.getFilename(), sw.getResult());
		}
	}

	protected String getIdStr(int i)
	{
		if (m_doc.getConfig().UseHexID)
		{
			return "0x" + Integer.toString(i, 16);
		}

		return Integer.toString(i);
	}
}
